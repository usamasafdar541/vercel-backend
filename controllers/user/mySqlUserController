const express = require("express");
const mysql = require("mysql");
const bodyParser = require("body-parser");
const asyncHandler = require("express-async-handler");
const jwt = require("jsonwebtoken");
const otpService = require("../../services/otpService");
const bcrypt = require("bcrypt");

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

const connection = mysql.createConnection({
  host: "localhost",
  user: "your_username",
  password: "your_password",
  database: "your_database",
});

connection.connect((err) => {
  if (err) {
    console.error("Error connecting to MySQL: " + err.stack);
    return;
  }
  console.log("Connected to MySQL as id " + connection.threadId);
});

// ... (Other imports and configurations)

const registerUser = asyncHandler(async (req, res) => {
  try {
    // ... (Validation and input processing)

    const userExistQuery = "SELECT * FROM users WHERE email = ?";
    const userExistResult = await query(connection, userExistQuery, [email]);

    if (userExistResult.length > 0) {
      return res.status(400).json({
        status: false,
        message: "User already exists",
      });
    }

    const hash = await bcrypt.hash(password, 10);

    const insertUserQuery =
      "INSERT INTO users (email, name, password, roles) VALUES (?, ?, ?, ?)";
    const insertUserResult = await query(connection, insertUserQuery, [
      email,
      name,
      hash,
      "employee",
    ]);

    const userId = insertUserResult.insertId;

    const payload = {
      userId: userId,
      userEmail: email,
      userName: name,
      roles: ["employee"],
    };

    return res.status(201).json({
      status: true,
      message: "User created successfully",
      data: payload,
    });
  } catch (error) {
    return res.status(500).json({
      status: false,
      message: "Error in creating user",
      error: error.message,
    });
  }
});

const loginUser = asyncHandler(async (req, res, next) => {
  try {
    // ... (Validation and input processing)

    const userQuery = "SELECT * FROM users WHERE email = ?";
    const userResult = await query(connection, userQuery, [email]);

    if (userResult.length === 0) {
      return res.status(404).json({
        status: false,
        message: "No user found with this email",
      });
    }

    const user = userResult[0];

    const matchPassword = await bcrypt.compare(password, user.password);

    if (!matchPassword) {
      return res.status(401).json({
        status: false,
        message: "Invalid credentials",
      });
    }

    const isAdmin = user.roles.includes("admin");
    const tokenPayload = {
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        roles: user.roles,
        isAdmin: isAdmin,
      },
    };

    const token = jwt.sign(tokenPayload, jwtSecret, {
      expiresIn: "1h",
    });

    const responseData = {
      status: true,
      message: "Logged in successfully",
      data: {
        userType: isAdmin ? "admin" : "user",
        userInfo: tokenPayload,
        token: token,
      },
    };
    return res.status(200).json(responseData);
  } catch (error) {
    next(error);
  }
});

// ... (Other route handlers)

// Generic function to execute SQL queries with parameters
function query(connection, sql, values) {
  return new Promise((resolve, reject) => {
    connection.query(sql, values, (error, results, fields) => {
      if (error) {
        reject(error);
      } else {
        resolve(results);
      }
    });
  });
}

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
